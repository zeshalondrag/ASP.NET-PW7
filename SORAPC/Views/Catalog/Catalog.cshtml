@model IEnumerable<SORAPC.Models.Product>
@{
    ViewData["Title"] = "Каталог товаров";
}

<link rel="stylesheet" href="~/css/catalog.css" />

<div class="filters-card">
    <div class="filters">
        <div class="filter-group">
            <label for="sortPrice">Сортировка по цене:</label>
            <select id="sortPrice" onchange="applyFilters()">
                <option value="">По умолчанию</option>
                <option value="asc">По возрастанию</option>
                <option value="desc">По убыванию</option>
            </select>
        </div>

        <div class="filter-group">
            <label for="categoryFilter">Категория товара:</label>
            <select id="categoryFilter" onchange="applyFilters()">
                <option value="">Все категории</option>
                <option value="1">Материнская плата</option>
                <option value="2">Видеокарта</option>
                <option value="3">Процессор</option>
                <option value="4">Система охлаждения</option>
                <option value="5">Оперативная память</option>
                <option value="6">Блок питания</option>
                <option value="7">Жесткий диск/SSD</option>
                <option value="8">Корпус</option>
                <option value="9">Периферия</option>
            </select>
        </div>

        <button class="clear-filters-button" onclick="clearFilters()">Очистить фильтры</button>
    </div>
</div>

<div class="product-container">
    @foreach (var i in Model)
    {
        <div class="product-card" data-category="@i.ProductCategoryId" data-price="@i.Price">
            <a asp-action="Details" asp-controller="ProductDetails" asp-route-id="@i.IdProduct">
                <img src="@Url.Content("~/image/" + i.Img)" alt="@i.Names" class="product-image">
            </a>
            <div class="product-details">
                <a asp-action="Details" asp-controller="ProductDetails" asp-route-id="@i.IdProduct">
                    <h4 class="product-name">@i.Names</h4>
                </a>
                <div class="product-rating">
                    <span class="stars">★ 4.97 | 53 отзыва</span>
                </div>
                <div class="product-availability">
                    <span class="available">
                        @{
                            string status = i.ProductStatusId == 1 ? "В наличии" :
                            i.ProductStatusId == 2 ? "Нет в наличии" :
                            "Неизвестно";
                            @status
                        }
                    </span>
                    <span class="pickup">Пункты выдачи доступны</span>
                </div>
            </div>
            <div class="price-section">
                <p class="price">@i.Price.ToString("N0") ₽</p>
                <button class="buy-button">Купить</button>
            </div>
        </div>
    }
</div>

<script>
    function applyFilters() {
        const sortPrice = document.getElementById('sortPrice').value;
        const categoryFilter = document.getElementById('categoryFilter').value;
        const products = document.querySelectorAll('.product-card');

        products.forEach(product => {
            const productCategory = product.getAttribute('data-category');
            if (categoryFilter && productCategory !== categoryFilter) {
                product.style.display = 'none';
            } else {
                product.style.display = 'flex';
            }
        });

        const productContainer = document.querySelector('.product-container');
        const sortedProducts = Array.from(products)
            .filter(product => product.style.display !== 'none')
            .sort((a, b) => {
                const priceA = parseFloat(a.getAttribute('data-price'));
                const priceB = parseFloat(b.getAttribute('data-price'));
                if (sortPrice === 'asc') return priceA - priceB;
                if (sortPrice === 'desc') return priceB - priceA;
                return 0; 
            });

        productContainer.innerHTML = '';
        sortedProducts.forEach(product => productContainer.appendChild(product));
    }

    function clearFilters() {
        document.getElementById('sortPrice').value = '';
        document.getElementById('categoryFilter').value = '';

        const products = document.querySelectorAll('.product-card');
        products.forEach(product => {
            product.style.display = 'flex';
        });

        const productContainer = document.querySelector('.product-container');
        const sortedProducts = Array.from(products).sort((a, b) => {
            const priceA = parseFloat(a.getAttribute('data-price'));
            const priceB = parseFloat(b.getAttribute('data-price'));
            return priceA - priceB; 
        });

        productContainer.innerHTML = '';
        sortedProducts.forEach(product => productContainer.appendChild(product));
    }
</script>